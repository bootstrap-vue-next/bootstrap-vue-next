# This workflow is for the release please action. It automates releases when using conventional commit messages
# It also auto publishes releases to npm under the @latest tag
# For more information see: https://github.com/google-github-actions/release-please-action

name: release-main

on:
  push:
    branches:
      - main

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  release-please:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18.x]

    steps:
      - name: Use Release Please
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          monorepo-tags: true
          
      # The logic below handles the npm publication:

      - name: Clone Repository
        uses: actions/checkout@v3
        if: ${{ steps.release.outputs.releases_created }}
        
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
        if: ${{ steps.release.outputs.releases_created }}

      - name: Install PNPM
        uses: pnpm/action-setup@v2.2.4
        id: pnpm-install
        if: ${{ steps.release.outputs.releases_created }}

      - name: Get PNPM Store Directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        if: ${{ steps.release.outputs.releases_created }}

      - name: Setup PNPM Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
        if: ${{ steps.release.outputs.releases_created }}

      - name: Install Dependencies
        run: pnpm install --ignore-scripts --frozen-lockfile
        if: ${{ steps.release.outputs.releases_created }}

      - name: Build Library
        run: pnpm run build --filter bootstrap-vue-next --filter @bootstrap-vue-next/nuxt
        if: ${{ steps.release.outputs.releases_created }}

      - name: Publish Main
        run: pnpm publish --tag latest --filter bootstrap-vue-next --access=public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        if: ${{ steps.release.outputs.releases_created && steps.release.outputs['packages/bootstrap-vue-next--release_created'] }}

      - name: Publish Nuxt
        run: pnpm publish --tag latest --filter @bootstrap-vue-next/nuxt --access=public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN_NUXT_PACKAGE}}
        if: ${{ steps.release.outputs.releases_created && steps.release.outputs['packages/nuxt--release_created'] }}
        