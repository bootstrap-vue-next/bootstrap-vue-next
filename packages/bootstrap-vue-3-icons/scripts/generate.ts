#!/usr/bin/env ts-node-esm

import pkg from '../package.json' assert {type: 'json'}
import {mkdir, readdir, readFile, writeFile} from 'node:fs/promises'
import {fileURLToPath} from 'node:url'
import {basename, dirname, extname, join, resolve} from 'node:path'
import {pascalCase} from '../src/utils'
import {template} from 'lodash-es'

interface Data {
  version: string
  license: string
  homepage: string
  created: string
  componentNames: Array<string>
  icons: Record<string, unknown>
}

// /bootstrap-vue-3/packages/bootstrap-vue-3-icons/scripts
const __dirname = dirname(fileURLToPath(import.meta.url))

const packageDir = join(__dirname, '../')

const iconsOutputDir = join(packageDir, 'icons/')

const iconsBase = join(packageDir, 'src', 'components', 'icons')

const iconsFile = resolve(iconsBase, 'icons.ts')
const pluginFile = resolve(iconsBase, 'plugin.js')
const typesFile = resolve(iconsBase, 'icons.d.ts')

// Template for `src/icons/icons.js`
const iconsTemplateFn = template(`// --- BEGIN AUTO-GENERATED FILE ---
//
// @IconsVersion: <%= version %>
// @Generated: <%= created %>
//
// This file is generated on each build. Do not edit this file!
/*!
 * BootstrapVue Icons, generated from Bootstrap Icons <%= version %>
 *
 * @link <%= homepage %>
 * @license <%= license %>
 * https://github.com/twbs/icons/blob/master/LICENSE.md
 */
import { makeIcon } from './helpers/make-icon'
// --- BootstrapVue custom icons ---
export const BIconBlank = /*#__PURE__*/ makeIcon('Blank', '')
// --- Bootstrap Icons ---
<% componentNames.forEach(component => { %>
// eslint-disable-next-line
export const <%= component %> = /*#__PURE__*/ makeIcon(
  '<%= icons[component].name %>',
  '<%= icons[component].content %>'
)
<% }) %>
// --- END AUTO-GENERATED FILE ---
`)

// Template for `src/icons/plugin.js`
const pluginTemplateFn = template(`// --- BEGIN AUTO-GENERATED FILE ---
//
// @IconsVersion: <%= version %>
// @Generated: <%= created %>
//
// This file is generated on each build. Do not edit this file!
// import { pluginFactoryNoConfig } from '../utils/plugins'
// Icon helper component
import  BIcon  from '../components/BIcon.vue'
// Icon stacking component
import BIconstack  from '../components/BIconstack.vue'
import {
  // BootstrapVue custom icons
  BIconBlank,
  // Bootstrap icons
  <%= componentNames.join(',\\n  ') %>
} from './icons'
// Icon component names for used in the docs
export const iconNames = [
  // BootstrapVue custom icon component names
  'BIconBlank',
  // Bootstrap icon component names
  <%= componentNames.map(n => ("'" + n + "'")).join(',\\n  ') %>
]
// Export the icons plugin
// export const IconsPlugin = /*#__PURE__*/ pluginFactoryNoConfig({
//   components: {
//     // Icon helper component
//     BIcon,
//     // Icon stacking component
//     BIconstack,
//     // BootstrapVue custom icon components
//     BIconBlank,
//     // Bootstrap icon components
//     <%= componentNames.join(',\\n    ') %>
//   }
// })
// Export the BootstrapVueIcons plugin installer
// Mainly for the stand-alone bootstrap-vue-icons.xxx.js builds
export const BootstrapVueIcons = /*#__PURE__*/ pluginFactoryNoConfig(
  { plugins: { IconsPlugin } },
  { NAME: 'BootstrapVueIcons' }
)
// --- END AUTO-GENERATED FILE ---
`)

// Template for `src/icons/icons.d.ts`
const typesTemplateFn = template(`// --- BEGIN AUTO-GENERATED FILE ---
//
// @IconsVersion: <%= version %>
// @Generated: <%= created %>
//
// This file is generated on each build. Do not edit this file!
import Vue from 'vue'
import { BvComponent } from '../'
// --- BootstrapVue custom icons ---
export declare class BIconBlank extends BvComponent {}
// --- Bootstrap Icons ---
<% componentNames.forEach(component => { %>
export declare class <%= component %> extends BvComponent {}
<% }) %>
// --- END AUTO-GENERATED FILE ---
`)

// Parses a single SVG File
const processFile = async (file: string, data: Data): Promise<void> => {
  file = join(iconsOutputDir, file)
  if (extname(file) !== '.svg') {
    return
  }
  const name = pascalCase(basename(file, '.svg'))
  const componentName = `BIcon${name}`
  const svg = await readFile(file, 'utf8')
  const content = svg
    .replace(/<svg[^>]+>/i, '')
    .replace(/<\/svg>/i, '')
    .replace(/>\s+</g, '><')
    .replace(' stroke="#000"', ' stroke="currentColor"')
    .trim()
  data.icons[componentName] = {name, content}
  data.componentNames.push(componentName)
}

// Method to generate the updated `package.json` content
// const updatePkgMeta = (data: Data): string => {
//   // Create a semi-deep clone of the current `package.json`
//   const newPkg = {...pkg, meta: {...pkg.meta}}
//   // Grab current component entries array and filter out auto-generated entries
//   const metaComponents = pkg.meta.components.filter((c) => !c['auto-gen'])
//   // Grab the props definition array from `BIcon` and filter out `icon` prop
//   const iconProps = metaComponents
//     .find((m) => m.component === 'BIcon')
//     .props.filter((p) => p.prop !== 'icon')
//   // Build the icon component entries
//   const iconMeta = data.componentNames.map((name) => ({
//     'component': name,
//     'auto-gen': `bootstrap-icons ${data.version}`,
//     'props': iconProps,
//   }))
//   // Update the package components meta info
//   newPkg.meta.components = [...metaComponents, ...iconMeta]
//   // Update the bootstrap-icons-version reference
//   newPkg.meta['bootstrap-icons-version'] = data.version
//   // Return the updated `package.json` as a json string
//   return `${JSON.stringify(newPkg, null, 2)}\n`
// }

const main = async () => {
  const today = new Date()
  const data: Data = {
    version: pkg.version,
    license: pkg.license,
    homepage: pkg.homepage,
    created: today.toISOString(),
    componentNames: [],
    icons: {},
  }

  console.log(`  Reading SVGs from bootstrap-icons version ${data.version}`)

  // Read in the list of SVG Files
  const files = await readdir(iconsOutputDir)
  // Process the SVG Data for all files
  await Promise.all(files.map((file) => processFile(file, data)))
  // Sort the icon component names
  data.componentNames = data.componentNames.sort()
  console.log(iconsOutputDir)
  await mkdir(iconsOutputDir)

  console.log(`  Read ${data.componentNames.length} SVGs...`)

  // Write out the files
  console.log('  Creating icon components...')
  await writeFile(iconsFile, iconsTemplateFn(data), 'utf8')
  console.log(`  Wrote to ${iconsFile}`)
  console.log('  Creating icon plugin...')
  await writeFile(pluginFile, pluginTemplateFn(data), 'utf8')
  console.log(`  Wrote to ${pluginFile}`)
  console.log('  Creating type declarations...')
  await writeFile(typesFile, typesTemplateFn(data), 'utf8')
  console.log(`  Wrote to ${typesFile}`)
  console.log('  Updating icons meta info...')
  // writeFileSync(bvIconsPkgFile, updatePkgMeta(data), 'utf8')
  // console.log(`  Wrote to ${bvIconsPkgFile}`)
}

main()
